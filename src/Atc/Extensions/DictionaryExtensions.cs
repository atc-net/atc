// ReSharper disable CheckNamespace
namespace System.Collections.Generic;

/// <summary>
/// Provides extension methods for working with <see cref="Dictionary{TKey, TValue}"/>.
/// These methods enhance dictionary functionality with efficient
/// retrieval, addition, and updating of values.
/// </summary>
public static class DictionaryExtensions
{
#if NET8_0_OR_GREATER
    /// <summary>
    /// Retrieves the value associated with the specified key or adds a new value if the key does not exist.
    /// </summary>
    /// <typeparam name="TKey">The type of the dictionary keys.</typeparam>
    /// <typeparam name="TValue">The type of the dictionary values.</typeparam>
    /// <param name="dict">The dictionary instance.</param>
    /// <param name="key">The key whose value to get or add.</param>
    /// <param name="value">The value to add if the key does not exist.</param>
    /// <returns>The existing or newly added value.</returns>
    public static TValue GetOrAdd<TKey, TValue>(
        this Dictionary<TKey, TValue> dict,
        TKey key,
        TValue value)
        where TKey : notnull
    {
        ref var dictionaryValue = ref CollectionsMarshal.GetValueRefOrAddDefault(dict, key, out var exists);
        if (exists)
        {
            return dictionaryValue!;
        }

        dictionaryValue = value;
        return value;
    }

    /// <summary>
    /// Retrieves the value associated with the specified key or adds a new value generated by the provided factory function if the key does not exist.
    /// </summary>
    /// <typeparam name="TKey">The type of the dictionary keys.</typeparam>
    /// <typeparam name="TValue">The type of the dictionary values.</typeparam>
    /// <param name="dict">The dictionary instance.</param>
    /// <param name="key">The key whose value to get or add.</param>
    /// <param name="valueFactory">A function to generate the value if the key does not exist.</param>
    /// <returns>The existing or newly added value.</returns>
    public static TValue GetOrAdd<TKey, TValue>(
        this Dictionary<TKey, TValue> dict,
        TKey key,
        Func<TKey, TValue> valueFactory)
        where TKey : notnull
    {
        ArgumentNullException.ThrowIfNull(valueFactory);

        ref var dictionaryValue = ref CollectionsMarshal.GetValueRefOrAddDefault(dict, key, out var exists);
        if (exists)
        {
            return dictionaryValue!;
        }

        dictionaryValue = valueFactory(key);
        return dictionaryValue;
    }

    /// <summary>
    /// Attempts to update the value of an existing key in the dictionary.
    /// </summary>
    /// <typeparam name="TKey">The type of the dictionary keys.</typeparam>
    /// <typeparam name="TValue">The type of the dictionary values.</typeparam>
    /// <param name="dict">The dictionary instance.</param>
    /// <param name="key">The key whose value should be updated.</param>
    /// <param name="value">The new value to assign.</param>
    /// <returns><c>true</c> if the key exists and the value was updated; otherwise, <c>false</c>.</returns>
    public static bool TryUpdate<TKey, TValue>(
        this Dictionary<TKey, TValue> dict,
        TKey key,
        TValue value)
        where TKey : notnull
    {
        ref var dictionaryValue = ref CollectionsMarshal.GetValueRefOrNullRef(dict, key);
        if (Unsafe.IsNullRef(ref dictionaryValue))
        {
            return false;
        }

        dictionaryValue = value;
        return true;
    }

    /// <summary>
    /// Attempts to update the value of an existing key in the dictionary using a factory function.
    /// </summary>
    /// <typeparam name="TKey">The type of the dictionary keys.</typeparam>
    /// <typeparam name="TValue">The type of the dictionary values.</typeparam>
    /// <param name="dict">The dictionary instance.</param>
    /// <param name="key">The key whose value should be updated.</param>
    /// <param name="valueFactory">A function to generate the new value based on the existing value.</param>
    /// <returns><c>true</c> if the key exists and the value was updated; otherwise, <c>false</c>.</returns>
    public static bool TryUpdate<TKey, TValue>(
        this Dictionary<TKey, TValue> dict,
        TKey key,
        Func<TKey, TValue, TValue> valueFactory)
        where TKey : notnull
    {
        ArgumentNullException.ThrowIfNull(valueFactory);

        ref var dictionaryValue = ref CollectionsMarshal.GetValueRefOrNullRef(dict, key);
        if (Unsafe.IsNullRef(ref dictionaryValue))
        {
            return false;
        }

        dictionaryValue = valueFactory(key, dictionaryValue);
        return true;
    }
#endif
}